Dsonar.findbugs.timeout=1800


- script: |
    # Get image size in bytes
    imageSize=$(docker inspect --format='{{.Size}}' your_image_name:your_image_tag)
    
    echo "Image Size (bytes): $imageSize"
  displayName: 'Get Docker Image Size'


- script: |
    # List Docker images and extract the size
    imageSize=$(docker images --format "{{.Size}}" your_image_name:your_image_tag)
    
    echo "Image Size: $imageSize"
  displayName: 'Get Docker Image Size'




trigger:
- your_trigger

pool:
  vmImage: 'windows-latest'

steps:
- powershell: |
    # Set Java memory configurations and other options in _JAVA_OPTIONS
    $maxHeapSize = "512m"  # Maximum heap size
    $initialHeapSize = "256m"  # Initial heap size
    $otherOptions = "-Dmy.property=value"  # Other Java options

    $env:_JAVA_OPTIONS = "-Xmx$maxHeapSize -Xms$initialHeapSize $otherOptions"

    # Optionally, display _JAVA_OPTIONS for verification
    Write-Host "_JAVA_OPTIONS: $($env:_JAVA_OPTIONS)"
  displayName: 'Set Java Memory Configurations'

- script: |
    # Run your Java application or build commands here
  displayName: 'Run Java Application'






trigger:
- your_trigger

pool:
  vmImage: 'windows-latest'

steps:
- powershell: |
    # Set SSL trust store properties in _JAVA_OPTIONS
    $trustStorePath = "C:\path\to\your\truststore.jks"
    $trustStorePassword = "yourTruststorePassword"

    $env:_JAVA_OPTIONS = "-Djavax.net.ssl.trustStore=$trustStorePath -Djavax.net.ssl.trustStorePassword=$trustStorePassword"

    # Optionally, display _JAVA_OPTIONS for verification
    Write-Host "_JAVA_OPTIONS: $($env:_JAVA_OPTIONS)"
  displayName: 'Set SSL Trust Store in _JAVA_OPTIONS'

- script: |
    # Run your Java application or build commands here
  displayName: 'Run Java Application'







stages:
- stage: Build
  jobs:
  - job: Build
    pool:
      name: YourSelfHostedAgentName # Specify your self-hosted agent's name
    steps:
    - powershell: |
        # Set the desired JDK version as an environment variable
        # Replace 'JDK11_HOME' with the desired variable name
        # Replace 'C:\Path\To\Your\JDK11' with the actual path to JDK 11
        $env:JDK11_HOME = 'C:\Path\To\Your\JDK11'
        Write-Host "JDK 11 is set to $($env:JDK11_HOME)"
      displayName: 'Set JDK 11 Environment Variable'
    - script: |
        # Use the environment variable in your build
        echo "Using JDK 11 from $JDK11_HOME"
        # Add your build steps that require JDK 11 here
      displayName: 'Build Java Application with JDK 11'






trigger:
- your_trigger

pool:
  vmImage: 'windows-latest'

steps:
- powershell: |
    # Define the directory you want to append to PATH
    $javaPath = "C:\path\to\java\bin"

    # Append the directory to PATH
    $currentPath = [System.Environment]::GetEnvironmentVariable("PATH", [System.EnvironmentVariableTarget]::Machine)
    $newPath = "$currentPath;$javaPath"
    [System.Environment]::SetEnvironmentVariable("PATH", $newPath, [System.EnvironmentVariableTarget]::Machine)

    # Optionally, display the updated PATH for verification
    Write-Host "Updated PATH: $($env:PATH)"
  displayName: 'Append Java to PATH'

- script: |
    # Run your Java application or build commands here
  displayName: 'Run Java Application'
