const request = require('request-promise');
const fs = require('fs');
const FormData = require('form-data');

const upload = async ({ emmAPI, apiKey, platform, externalId, subgroupIds, filePath, proxyUrl }) => {
    const form = new FormData();
    form.append("key", apiKey);
    form.append("platform", platform);
    form.append("externalId", externalId || "");
    form.append("subgroupIds", subgroupIds || "");
    form.append("app", fs.createReadStream(filePath));

    const formHeaders = form.getHeaders();

    try {
        const response = await request.post({
            url: `${emmAPI}/submit`,
            body: form,
            headers: formHeaders,
            encoding: null, // Ensure the response is returned as a Buffer
            proxy: proxyUrl, // Add the proxy URL here
        });

        const data = JSON.parse(response); // Parse the response data if it's JSON
        console.log("App uuid: " + data.uuid);
        return data.uuid;
    } catch (error) {
        console.error("Upload failed:", error.message);
        throw error;
    }
};





import requests
from requests_toolbelt.multipart.encoder import MultipartEncoder

# Form data
form = MultipartEncoder(
    fields={
        'key': apiKey,
        'platform': platform,
        'externalId': externalId or '',
        'subgroupIds': subgroupIds or '',
        'app': ('file', open(filePath, 'rb'))
    }
)

# Headers
headers = {'Content-Type': form.content_type}

try:
    response = requests.post(
        url=f"{emmAPI}/submit",
        data=form,
        headers=headers,
        proxies={'http': proxyUrl, 'https': proxyUrl},  # Add the proxy URL here
    )
    # Handle the response here
except requests.exceptions.RequestException as e:
    print(f"An error occurred: {e}")

