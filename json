


{
    "database": {
        "host": "{DB_HOST}",
        "port": "{DB_PORT}",
        "username": "{DB_USER}",
        "password": "{DB_PASS}"
    },
  "api_key": {
	   "grkey":  "{API_KEY}",
	   "name" : "{DB_HOST}"
    }	

}




import json
import re

# Load the JSON file as a string
with open('config.json', 'r') as file:
    config_str = file.read()

# Define the values for the parameters
parameters = {
    "DB_HOST": "localhost",
    "DB_PORT": 5432,
    "DB_USER": "admin",
    "DB_PASS": "secret",
    "API_KEY": "myapikey"
}

# Replace the placeholders using a regular expression
for key, value in parameters.items():
    config_str = re.sub(rf"\{{{key}\}}", str(value), config_str)

# Convert the string back to a dictionary
config = json.loads(config_str)

# Use the updated config dictionary
print(config)

# Optionally, save the updated config back to a JSON file
with open('updated_config.json', 'w') as file:
    json.dump(config, file, indent=4)


--------------------------------JSON

import csv
import json

# Read CSV and convert to JSON
def csv_to_json(csv_file, json_file):
    with open(csv_file, mode='r', encoding='utf-8') as file:
        csv_reader = csv.DictReader(file)  # Read CSV as dictionary
        data = list(csv_reader)  # Convert to list of dictionaries
    
    with open(json_file, mode='w', encoding='utf-8') as file:
        json.dump(data, file, indent=4)  # Write to JSON file with indentation

# Example usage
csv_to_json('data.csv', 'data.json')








const jsonArray = [
    { name: "apple" },
    { name: "banana" },
    { name: "cherry" }
];

const searchValue = "banana";

const exists = jsonArray.some(item => item.name === searchValue);

console.log(exists ? "Value found!" : "Value not found!");
