import * as fs from 'fs';

interface Summary {
  critical: number;
  high: number;
}

interface Finding {
  issue: string;
  id: number;
}

interface MyJson {
  summary: Summary;
  findings: Finding[];
}

class MyJsonData implements MyJson {
  summary: Summary;
  findings: Finding[];

  constructor(critical: number, high: number, issueData: Finding[]) {
    this.summary = { critical, high };
    this.findings = issueData;
  }
}

// Set dynamic values
const criticalValue = 5;
const highValue = 5;

// Function to generate an array of Finding
function generateIssueData(numberOfIssues: number): Finding[] {
  const issueData: Finding[] = [];

  for (let i = 1; i <= numberOfIssues; i++) {
    issueData.push({
      issue: `Testing${i}`,
      id: Math.floor(Math.random() * 1000) // Generate a random id as an example
    });
  }

  return issueData;
}

// Set the number of issues you want
const numberOfIssues = 2;

// Generate issueData dynamically
const issueData = generateIssueData(numberOfIssues);

// Create an instance of the class
const jsonData = new MyJsonData(criticalValue, highValue, issueData);

// Convert to JSON string with indentation
const jsonString = JSON.stringify(jsonData, null, 2);

// Write to a file
fs.writeFileSync('output.json', jsonString);

console.log('JSON file generated successfully.');
