// Load the built-in 'fs' module to read the file
const fs = require('fs');

// Read the JSON file synchronously (can also use async version)
const rawData = fs.readFileSync('data.json');

// Parse the JSON data
const jsonData = JSON.parse(rawData);

// Now you can work with jsonData
console.log(jsonData);

// Example: loop through the array
jsonData.forEach((item, index) => {
  console.log(`Item ${index + 1}: Language = ${item.Language}, Category = ${item.Category}`);
});








steps:
  - bash: |
      POOL_NAME="$(Agent.QueueName)"
      if [[ "$POOL_NAME" == *"sc-mac"* || "$POOL_NAME" == *"sc-android"* ]]; then
          echo "##vso[task.setvariable variable=IsMatchingPool]true"
          echo "Agent pool contains 'sc-mac' or 'sc-android'"
      else
          echo "##vso[task.setvariable variable=IsMatchingPool]false"
          echo "Agent pool does not contain 'sc-mac' or 'sc-android'"
      fi
    displayName: "Check Agent Pool in Bash"

  - script: echo "This runs only if the pool contains 'sc-mac' or 'sc-android'"
    condition: eq(variables['IsMatchingPool'], 'true')
    displayName: "Run if Pool is Mac or Android"





steps:
  - powershell: |
      $poolName = "$(Agent.QueueName)"
      if ($poolName -match "sc-mac|sc-android") {
          Write-Host "##vso[task.setvariable variable=IsMatchingPool]true"
          Write-Host "Agent pool contains 'sc-mac' or 'sc-android'"
      } else {
          Write-Host "##vso[task.setvariable variable=IsMatchingPool]false"
          Write-Host "Agent pool does not contain 'sc-mac' or 'sc-android'"
      }
    displayName: "Check Agent Pool in PowerShell"

  - script: echo "This runs only if the pool contains 'sc-mac' or 'sc-android'"
    condition: eq(variables['IsMatchingPool'], 'true')
    displayName: "Run if Pool is Mac or Android"



{
    "database": {
        "host": "{DB_HOST}",
        "port": "{DB_PORT}",
        "username": "{DB_USER}",
        "password": "{DB_PASS}"
    },
  "api_key": {
	   "grkey":  "{API_KEY}",
	   "name" : "{DB_HOST}"
    }	

}




import json
import re

# Load the JSON file as a string
with open('config.json', 'r') as file:
    config_str = file.read()

# Define the values for the parameters
parameters = {
    "DB_HOST": "localhost",
    "DB_PORT": 5432,
    "DB_USER": "admin",
    "DB_PASS": "secret",
    "API_KEY": "myapikey"
}

# Replace the placeholders using a regular expression
for key, value in parameters.items():
    config_str = re.sub(rf"\{{{key}\}}", str(value), config_str)

# Convert the string back to a dictionary
config = json.loads(config_str)

# Use the updated config dictionary
print(config)

# Optionally, save the updated config back to a JSON file
with open('updated_config.json', 'w') as file:
    json.dump(config, file, indent=4)


--------------------------------JSON

import csv
import json

# Read CSV and convert to JSON
def csv_to_json(csv_file, json_file):
    with open(csv_file, mode='r', encoding='utf-8') as file:
        csv_reader = csv.DictReader(file)  # Read CSV as dictionary
        data = list(csv_reader)  # Convert to list of dictionaries
    
    with open(json_file, mode='w', encoding='utf-8') as file:
        json.dump(data, file, indent=4)  # Write to JSON file with indentation

# Example usage
csv_to_json('data.csv', 'data.json')








const jsonArray = [
    { name: "apple" },
    { name: "banana" },
    { name: "cherry" }
];

const searchValue = "banana";

const exists = jsonArray.some(item => item.name === searchValue);

console.log(exists ? "Value found!" : "Value not found!");
